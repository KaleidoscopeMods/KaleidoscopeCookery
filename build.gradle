plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = mod_group_id
version = mod_version
archivesBaseName = "kaleidoscopecookery"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        configureEach {
            jvmArgs = [
                    "-XX:+IgnoreUnrecognizedVMOptions",
                    "-XX:+AllowEnhancedClassRedefinition"
            ]
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            workingDirectory project.file('run/client_a')
        }
        client2 {
            parent minecraft.runs.client
            workingDirectory project.file('run/client_b')
            args '--username', 'tartaric_acid'
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            workingDirectory project.file('run/server')
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/**'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    debug.verbose = true
    debug.export = true
    hotSwap = true
}

repositories {
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:${jei_version}")

    // EMI
    compileOnly fg.deobf("dev.emi:emi-forge:1.1.22+1.20.1:api")
    implementation fg.deobf("dev.emi:emi-forge:1.1.22+1.20.1")

    implementation fg.deobf("maven.modrinth:jade:11.13.1+forge")

    // KubeJS
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:2001.6.5-build.16")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:2001.2.3-build.10")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:9.2.14")
    runtimeOnly fg.deobf("maven.modrinth:probejs:6.0.0")

    // Farmer's Delight
    implementation fg.deobf("maven.modrinth:farmers-delight:1.20.1-1.2.6-forge")

    implementation fg.deobf("maven.modrinth:harvest-with-ease:9.4.0-forge,1.20.1")
    runtimeOnly fg.deobf("maven.modrinth:cobweb:1.0.1-forge,1.20.1")

    runtimeOnly fg.deobf('curse.maven:touhou-little-maid-355044:6440955-sources-6482784')
    runtimeOnly fg.deobf("maven.modrinth:appleskin:2.5.1+mc1.20.1-forge")
    runtimeOnly fg.deobf("maven.modrinth:better-advancements:0.4.2.25-forge")
    runtimeOnly fg.deobf("curse.maven:carry-on-274259:4882500")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]

    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}"
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    // 编译源码文件，方便发布 maven
    withSourcesJar()
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
